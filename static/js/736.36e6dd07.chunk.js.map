{"version":3,"file":"static/js/736.36e6dd07.chunk.js","mappings":"kTAIAA,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CAAC,EACzBA,EAAAA,EAAAA,SAAAA,OAAAA,QAJgB,mCAKhBA,EAAAA,EAAAA,SAAAA,OAAAA,SAAoC,QAE7B,IAAMC,EAAgB,mCAAG,sGACPD,EAAAA,EAAAA,IAAA,sBAAiC,CACtDE,OAAQ,CAAEC,KAAM,KAFY,uBACtBC,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAc,mCAAG,WAAMC,GAAN,yFACLN,EAAAA,EAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CAAEI,MAAAA,EAAOC,eAAe,EAAOJ,KAAM,KAFnB,uBACpBC,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdI,EAAiB,mCAAG,WAAMC,GAAN,yFACRT,EAAAA,EAAAA,IAAA,iBAAoBS,IADZ,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAUjBM,EAAS,mCAAG,WAAMD,GAAN,yFACAT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADA,uBACfL,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKTO,EAAW,mCAAG,WAAMF,GAAN,yFACFT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAkC,CACvDP,OAAQ,CAAEC,KAAM,KAFO,uBACjBC,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,qD,kLCpCXQ,GAAaC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,oDAGVC,GAAaD,EAAAA,EAAAA,IAAO,KAAPA,CAAH,wGAMVE,GAAaF,EAAAA,EAAAA,IAAO,IAAPA,CAAH,gE,IAKIA,EAAAA,EAAAA,IAAO,IAAPA,CAAH,mF,kBCmDxB,EA5Da,WACX,IA2BIG,EA3BJ,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BH,EAAAA,EAAAA,YAA5B,eAAOK,EAAP,KAAeC,EAAf,KAqBA,IAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBN,GAAW,GADO,mBAGST,EAAAA,EAAAA,GAAUgB,OAAON,IAH1B,OAGVO,EAHU,OAIhBJ,EAAUI,GAJM,gDAMhBC,EAAAA,OAAAA,QACE,+CACA,KAAMC,UARQ,yBAWhBV,GAAW,GAXK,4EAAH,qDAejBM,GACD,GAAE,CAACL,KAECE,EACH,OAAO,KAIT,IAAQQ,EAASR,EAATQ,KAER,OACE,UAAChB,EAAD,WACGI,IACC,SAAC,KAAD,CACEa,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGZP,EAAKQ,KAAI,SAAAC,GAMR,OAJEvB,EADEuB,EAAMC,aACE,0CAAsCD,EAAMC,cAE5C,6HAGV,UAAC5B,EAAD,YACE,gBAAK6B,IAAKzB,EAAYgB,MAAM,MAAMD,OAAO,MAAMW,IAAKH,EAAMI,QAC1D,SAAC5B,EAAD,UAAawB,EAAMI,SAFJJ,EAAM9B,GAK1B,MAGN,C","sources":["api/fetchApi.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '0ad512fb225eecaea999568cb90b6aa0';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {};\naxios.defaults.params['api_key'] = API_KEY;\naxios.defaults.params['language'] = 'en-US';\n\nexport const fetchTrendingApi = async () => {\n  const { data } = await axios.get(`/trending/movie/day`, {\n    params: { page: 1 },\n  });\n  return data;\n};\n\nexport const fetchSearchApi = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: { query, include_adult: false, page: 1 },\n  });\n  return data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const fetchMovieGenres = async () => {\n  const { data } = await axios.get(`/genre/movie/list`);\n  return data;\n};\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const fetchReview = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`, {\n    params: { page: 1 },\n  });\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const ActorsCard = styled('li')`\n  background-color: black;\n`;\nexport const ActorsList = styled('ul')`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 30px;\n`;\nexport const ActorsName = styled('p')`\n  color: white;\n  text-align: center;\n`;\n\nexport const ActorsError = styled('p')`\n  padding: px;\n  text-align: center;\n  font-size: 30px;\n`;","import { fetchCast } from '../../api/fetchApi';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { ActorsCard, ActorsList, ActorsName } from './Cast.styled.jsx';\nimport { Circles } from 'react-loader-spinner';\n\nconst Cast = () => {\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const [actors, setActors] = useState();\n\n  useEffect(() => {\n    const fetchActors = async () => {\n      setLoading(true);\n      try {\n        const actorsData = await fetchCast(Number(movieId));\n        setActors(actorsData);\n      } catch (error) {\n        Notify.failure(\n          'Ooops, something broke. Try again please... ',\n          error.messages\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchActors();\n  }, [movieId]);\n\n  if (!actors) {\n    return null;\n  }\n\n  let posterPath;\n  const { cast } = actors;\n\n  return (\n    <ActorsList>\n      {loading && (\n        <Circles\n          height=\"80\"\n          width=\"80\"\n          color=\"#4fa94d\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {cast.map(actor => {\n        if (actor.profile_path) {\n          posterPath = `https://image.tmdb.org/t/p/w200/${actor.profile_path}`;\n        } else {\n          posterPath = `https://st.depositphotos.com/2101611/4338/v/600/depositphotos_43381243-stock-illustration-male-avatar-profile-picture.jpg`;\n        }\n        return (\n          <ActorsCard key={actor.id}>\n            <img src={posterPath} width=\"200\" height=\"300\" alt={actor.name} />\n            <ActorsName>{actor.name}</ActorsName>\n          </ActorsCard>\n        );\n      })}\n    </ActorsList>\n  );\n};\nexport default Cast;\n"],"names":["axios","fetchTrendingApi","params","page","data","fetchSearchApi","query","include_adult","fetchMovieDetails","id","fetchCast","fetchReview","ActorsCard","styled","ActorsList","ActorsName","posterPath","useState","loading","setLoading","movieId","useParams","actors","setActors","useEffect","fetchActors","Number","actorsData","Notify","messages","cast","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","map","actor","profile_path","src","alt","name"],"sourceRoot":""}